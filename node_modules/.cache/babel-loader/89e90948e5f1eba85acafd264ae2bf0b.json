{"ast":null,"code":"var _jsxFileName = \"/home/coop/Projects/Work/fLotto-FE/src/App.tsx\";\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport ConnectWallet from './components/ConnectWallet';\nimport LottoArtifact from \"./contracts/Lotto/FantomLottery.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HARDHAT_NETWORK_ID = '31337';\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\nconst contractAddress = {\n  'Lotto': '0x5FbDB2315678afecb367f032d93F642f64180aa3'\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      lottoData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n    this._connectWallet = this._connectWallet.bind(this);\n    this._initializeEthers = this._initializeEthers.bind(this);\n    this._enter = this._enter.bind(this);\n    this._draw = this._draw.bind(this);\n    this._getPaid = this._getPaid.bind(this);\n    this._viewWinnings = this._viewWinnings.bind(this);\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No wallet connected.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App app-background\",\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          className: \"pt-4\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"FLotto\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"justify-content-end\",\n            children: /*#__PURE__*/_jsxDEV(ConnectWallet, {\n              connectWallet: this._connectWallet\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dashboard, {\n        enterFunction: this._enter,\n        drawFunction: this._draw,\n        getPaidFunction: this._getPaid,\n        viewWinningsFunction: this._viewWinnings,\n        userBalance: this._balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n  _initialize(userAddress) {\n    this.setState({\n      selectedAddress: userAddress\n    });\n\n    this._initializeEthers();\n\n    this._getLottoData();\n  }\n\n  async _initializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    this._lotto = new ethers.Contract(contractAddress.Lotto, LottoArtifact.abi, this._provider.getSigner(0));\n  }\n\n  async _getLottoData() {\n    const name = \"Name\"; //await this._lotto.viewOdds();\n\n    const symbol = \"Poop\"; //await this._lotto.readyToDraw();\n\n    this.setState({\n      lottoData: {\n        name,\n        symbol\n      }\n    });\n  }\n\n  async _updateEntries() {\n    console.log(this.state.lottoData);\n    const balance = await this._lotto.viewWinnings();\n    this.setState({\n      balance\n    });\n  }\n\n  async _connectWallet() {\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      //this._stopPollingData();\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      //this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  }\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  }\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n  async _enter() {\n    try {\n      this._dismissTransactionError();\n\n      const ticketPrice = ethers.utils.parseEther(\"1\");\n      const tx = await this._lotto.enter({\n        value: ticketPrice\n      });\n      this.setState({\n        txBeingSent: tx.hash\n      });\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      } //await this._updateEntries();\n\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  }\n\n  async _draw() {\n    try {\n      this._dismissTransactionError();\n\n      this._viewWinnings();\n\n      const tx = await this._lotto.draw();\n      this.setState({\n        txBeingSent: tx.hash\n      });\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      } //await this._updateEntries();\n\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  }\n\n  async _getPaid() {\n    try {\n      this._dismissTransactionError();\n\n      const tx = await this._lotto.getPaid();\n      this.setState({\n        txBeingSent: tx.hash\n      });\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      } //await this._updateEntries();\n\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  }\n\n  async _viewWinnings() {\n    try {\n      const balance = await this._lotto.viewWinnings();\n      this._balance = ethers.utils.formatEther(balance);\n      this.setState({\n        balance\n      });\n      console.log(balance);\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/coop/Projects/Work/fLotto-FE/src/App.tsx"],"names":["ethers","React","Container","Row","Col","Dashboard","ConnectWallet","LottoArtifact","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","contractAddress","App","Component","constructor","props","initialState","lottoData","undefined","selectedAddress","balance","txBeingSent","transactionError","networkError","state","_connectWallet","bind","_initializeEthers","_enter","_draw","_getPaid","_viewWinnings","render","window","ethereum","_balance","_initialize","userAddress","setState","_getLottoData","_provider","providers","Web3Provider","_lotto","Contract","Lotto","abi","getSigner","name","symbol","_updateEntries","console","log","viewWinnings","enable","_checkNetwork","on","newAddress","_resetState","networkId","_dismissTransactionError","_dismissNetworkError","_getRpcErrorMessage","error","data","message","networkVersion","ticketPrice","utils","parseEther","tx","enter","value","hash","receipt","wait","status","Error","code","draw","getPaid","formatEther"],"mappings":"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","sourcesContent":["import {ethers} from 'ethers';\nimport React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\n\nimport Dashboard from './components/Dashboard';\nimport ConnectWallet from './components/ConnectWallet';\n\nimport LottoArtifact from \"./contracts/Lotto/FantomLottery.json\";\n\ninterface Props {}\ninterface State {\n  lottoData: any,\n  selectedAddress: any,\n  balance: any,\n  txBeingSent: any,\n  transactionError: any,\n  networkError: any,\n}\ninterface App {\n  initialState: any,\n  _pollDataInterval: any,\n  _lotto: any,\n  _provider: any,\n  _balance: any,\n}\n\nconst HARDHAT_NETWORK_ID = '31337';\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\nconst contractAddress = {'Lotto':'0x5FbDB2315678afecb367f032d93F642f64180aa3'};\n\ndeclare const window: any;\n\nclass App extends React.Component <Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      lottoData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n\n    this._connectWallet = this._connectWallet.bind(this);\n    this._initializeEthers = this._initializeEthers.bind(this);\n    this._enter = this._enter.bind(this);\n    this._draw = this._draw.bind(this);\n    this._getPaid = this._getPaid.bind(this);\n    this._viewWinnings = this._viewWinnings.bind(this);\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return <div>No wallet connected.</div>;\n    }\n\n    return (\n      <div className=\"App app-background\">\n\n          <Container>\n            \n            <Row className=\"pt-4\">\n              <Col>\n                <h1>\n                  FLotto\n                </h1>\n              </Col>\n              <Col className=\"justify-content-end\">\n                <ConnectWallet connectWallet={this._connectWallet}/>\n              </Col>\n            </Row>\n          </Container>\n          <Dashboard \n            enterFunction={this._enter}\n            drawFunction={this._draw}\n            getPaidFunction={this._getPaid}\n            viewWinningsFunction={this._viewWinnings}\n            userBalance={this._balance}\n          />\n      </div>\n    );\n  }\n\n  _initialize(userAddress:any) {\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    this._initializeEthers();\n    this._getLottoData();\n  }\n\n  async _initializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    this._lotto = new ethers.Contract(\n      contractAddress.Lotto,\n      LottoArtifact.abi,\n      this._provider.getSigner(0)\n    );\n  }\n\n  async _getLottoData() {\n    const name = \"Name\";//await this._lotto.viewOdds();\n    const symbol = \"Poop\";//await this._lotto.readyToDraw();\n\n    this.setState({ lottoData: { name, symbol } });\n  }\n\n  async _updateEntries() {\n\n    console.log(this.state.lottoData);\n    const balance = await this._lotto.viewWinnings();\n    this.setState({ balance });\n  }\n\n  async _connectWallet() {\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]:any[]) => {\n      //this._stopPollingData();\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n    \n    window.ethereum.on(\"networkChanged\", ([networkId]:any[]) => {\n      //this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  _getRpcErrorMessage(error:any) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({ \n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n\n  async _enter() {\n\n    try {\n      this._dismissTransactionError();\n\n      const ticketPrice = ethers.utils.parseEther(\"1\");\n      const tx = await this._lotto.enter({ value: ticketPrice });\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      //await this._updateEntries();\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _draw() {\n\n    try {\n      this._dismissTransactionError();\n          this._viewWinnings();\n\n      const tx = await this._lotto.draw();\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      //await this._updateEntries();\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _getPaid() {\n\n    try {\n      this._dismissTransactionError();\n\n      const tx = await this._lotto.getPaid();\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      //await this._updateEntries();\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _viewWinnings() {\n\n    try {\n      const balance = await this._lotto.viewWinnings();\n      this._balance = ethers.utils.formatEther(balance);\n      this.setState({ balance });\n      console.log(balance);\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}