{"ast":null,"code":"var _jsxFileName = \"/home/coop/Projects/Work/fLotto-FE/src/App.tsx\";\nimport { ethers } from 'ethers';\nimport React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport ConnectWallet from './components/ConnectWallet';\nimport LottoArtifact from \"./contracts/Lotto/FantomLottery.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HARDHAT_NETWORK_ID = '31337';\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\nconst contractAddress = {\n  'Lotto': '0x5FbDB2315678afecb367f032d93F642f64180aa3'\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      lottoData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n    this._connectWallet = this._connectWallet.bind(this);\n    this._enter = this._enter.bind(this);\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No wallet connected.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App app-background\",\n      children: [/*#__PURE__*/_jsxDEV(Dashboard, {\n        enterFunction: this._enter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-4\",\n        children: /*#__PURE__*/_jsxDEV(ConnectWallet, {\n          connectWallet: this._connectWallet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n  _initialize(userAddress) {\n    this.setState({\n      selectedAddress: userAddress\n    });\n\n    this._intializeEthers();\n\n    this._getLottoData();\n  }\n\n  async _intializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n    this._lotto = new ethers.Contract(contractAddress.Lotto, LottoArtifact.abi, this._provider.getSigner(0));\n  }\n\n  async _getLottoData() {\n    const name = \"Name\"; //await this._lotto.viewOdds();\n\n    const symbol = \"Poop\"; //await this._lotto.readyToDraw();\n\n    this.setState({\n      lottoData: {\n        name,\n        symbol\n      }\n    });\n  }\n\n  async _updateEntries() {\n    console.log(this.state.lottoData);\n    const balance = await this._lotto.viewWinnings();\n    this.setState({\n      balance\n    });\n  }\n\n  async _connectWallet() {\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      //this._stopPollingData();\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      //this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  }\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  }\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n  async _enter() {\n    try {\n      this._dismissTransactionError();\n\n      const ticketPrice = ethers.utils.parseEther(\"1\");\n      const tx = await this._lotto.enter({\n        value: ticketPrice\n      });\n      this.setState({\n        txBeingSent: tx.hash\n      });\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      } //await this._updateEntries();\n\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/coop/Projects/Work/fLotto-FE/src/App.tsx"],"names":["ethers","React","Dashboard","ConnectWallet","LottoArtifact","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","contractAddress","App","Component","constructor","props","initialState","lottoData","undefined","selectedAddress","balance","txBeingSent","transactionError","networkError","state","_connectWallet","bind","_enter","render","window","ethereum","_initialize","userAddress","setState","_intializeEthers","_getLottoData","_provider","providers","Web3Provider","_lotto","Contract","Lotto","abi","getSigner","name","symbol","_updateEntries","console","log","viewWinnings","enable","_checkNetwork","on","newAddress","_resetState","networkId","_dismissTransactionError","_dismissNetworkError","_getRpcErrorMessage","error","data","message","networkVersion","ticketPrice","utils","parseEther","tx","enter","value","hash","receipt","wait","status","Error","code"],"mappings":"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","sourcesContent":["import {ethers} from 'ethers';\nimport React from 'react';\nimport './App.css';\n\nimport Dashboard from './components/Dashboard';\nimport ConnectWallet from './components/ConnectWallet';\n\nimport LottoArtifact from \"./contracts/Lotto/FantomLottery.json\";\n\ninterface Props {}\ninterface State {\n  lottoData: any,\n  selectedAddress: any,\n  balance: any,\n  txBeingSent: any,\n  transactionError: any,\n  networkError: any,\n}\ninterface App {\n  initialState: any,\n  _pollDataInterval: any,\n  _lotto: any,\n  _provider: any,\n}\n\nconst HARDHAT_NETWORK_ID = '31337';\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\nconst contractAddress = {'Lotto':'0x5FbDB2315678afecb367f032d93F642f64180aa3'};\n\ndeclare const window: any;\n\nclass App extends React.Component <Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      lottoData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n\n    this._connectWallet = this._connectWallet.bind(this);\n    this._enter = this._enter.bind(this);\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return <div>No wallet connected.</div>;\n    }\n\n    return (\n      <div className=\"App app-background\">\n          <Dashboard enterFunction={this._enter} />\n          <div className=\"pt-4\">\n            <ConnectWallet connectWallet={this._connectWallet}/>\n          </div>\n      </div>\n    );\n  }\n\n  _initialize(userAddress:any) {\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    this._intializeEthers();\n    this._getLottoData();\n  }\n\n  async _intializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    this._lotto = new ethers.Contract(\n      contractAddress.Lotto,\n      LottoArtifact.abi,\n      this._provider.getSigner(0)\n    );\n  }\n\n  async _getLottoData() {\n    const name = \"Name\";//await this._lotto.viewOdds();\n    const symbol = \"Poop\";//await this._lotto.readyToDraw();\n\n    this.setState({ lottoData: { name, symbol } });\n  }\n\n  async _updateEntries() {\n\n    console.log(this.state.lottoData);\n    const balance = await this._lotto.viewWinnings();\n    this.setState({ balance });\n  }\n\n  async _connectWallet() {\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]:any[]) => {\n      //this._stopPollingData();\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n    \n    window.ethereum.on(\"networkChanged\", ([networkId]:any[]) => {\n      //this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  _getRpcErrorMessage(error:any) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({ \n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n\n  async _enter() {\n\n    try {\n      this._dismissTransactionError();\n\n      const ticketPrice = ethers.utils.parseEther(\"1\");\n      const tx = await this._lotto.enter({ value: ticketPrice });\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      //await this._updateEntries();\n    } catch (error) {\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}