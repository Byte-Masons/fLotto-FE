{"ast":null,"code":"var _jsxFileName = \"/home/coop/Projects/Work/fLotto-FE/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HARDHAT_NETWORK_ID = '31337';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  componentDidMount() {\n    let ethereum = window.ethereum;\n  }\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000); // We run it once immediately so we don't have to wait for it\n\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({\n      balance\n    });\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable(); // Once we have the address, we can initialize the application.\n    // First we check the network\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress); // We reinitialize it whenever the user changes their account.\n\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData(); // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n\n\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    }); // We reset the dapp state if the network is changed\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n\n      this._resetState();\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  } // This is an utility method that turns an RPC error into a human readable\n  // message.\n\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  } // This method resets the state\n\n\n  _resetState() {\n    this.setState(this.initialState);\n  } // This method checks if Metamask selected network is Localhost:8545 \n\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No wallet connected.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App app-background\",\n      children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/coop/Projects/Work/fLotto-FE/src/App.tsx"],"names":["React","Dashboard","HARDHAT_NETWORK_ID","App","Component","constructor","props","initialState","tokenData","undefined","selectedAddress","balance","txBeingSent","transactionError","networkError","state","componentDidMount","ethereum","window","_startPollingData","_pollDataInterval","setInterval","_updateBalance","_stopPollingData","clearInterval","_token","balanceOf","setState","_connectWallet","enable","_checkNetwork","_initialize","on","newAddress","_resetState","networkId","_dismissTransactionError","_dismissNetworkError","_getRpcErrorMessage","error","data","message","networkVersion","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport Dashboard from './components/Dashboard'\n\ninterface Props {\n}\n\ninterface App {\n  initialState: any,\n  _pollDataInterval: any,\n\n}\n\nconst HARDHAT_NETWORK_ID = '31337';\n\ndeclare const window: any;\n\nclass App extends React.Component {\n\n  constructor(props: Props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  componentDidMount() {\n    let ethereum = window.ethereum;\n  }\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n    \n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error:any) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({ \n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n  render() {\n\n    if (window.ethereum === undefined) {\n      return <div>No wallet connected.</div>;\n    }\n\n    return (\n      <div className=\"App app-background\">\n          <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}